/* Generated By:JJTree: Do not edit this line. ASTConstraintsSet.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.tudarmstadt.ukp.clarin.webanno.constraints.grammar;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ASTConstraintsSet
    extends SimpleNode
{
    private final Map<String, String> imports = new LinkedHashMap<>();
    private final Map<String, List<ASTRule>> scopes = new LinkedHashMap<>();

    public ASTConstraintsSet(int id)
    {
        super(id);
    }

    public ASTConstraintsSet(ConstraintsParser p, int id)
    {
        super(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(ConstraintsParserVisitor visitor, Object data)
    {

        return visitor.visit(this, data);
    }

    public void addAlias(String aFullyQualifiedName, String aSimpleName)
    {
        imports.put(aSimpleName, aFullyQualifiedName);
    }

    public void addRule(String aScope, ASTRule aRule)
    {
        List<ASTRule> rules = scopes.computeIfAbsent(aScope, scope -> new ArrayList<>());
        rules.add(aRule);
    }

    public Map<String, String> getImports()
    {
        return imports;
    }

    public Map<String, List<ASTRule>> getScopes()
    {
        return scopes;
    }

    public List<ASTRule> getRules(String aScope)
    {
        return scopes.getOrDefault(aScope, Collections.emptyList());
    }
}
/* JavaCC - OriginalChecksum=89d27953d2fc2e3c3cab583274c301d0 (do not edit this line) */
